// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/wathuta/technical_test/payment/internal/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: ctx, payment
func (_m *Repository) CreatePayment(ctx context.Context, payment *model.Payment) (*model.Payment, error) {
	ret := _m.Called(ctx, payment)

	var r0 *model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Payment) (*model.Payment, error)); ok {
		return rf(ctx, payment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Payment) *model.Payment); ok {
		r0 = rf(ctx, payment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentById provides a mock function with given fields: ctx, payment_id
func (_m *Repository) GetPaymentById(ctx context.Context, payment_id string) (*model.Payment, error) {
	ret := _m.Called(ctx, payment_id)

	var r0 *model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Payment, error)); ok {
		return rf(ctx, payment_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Payment); ok {
		r0 = rf(ctx, payment_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payment_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByMerchantRequestId provides a mock function with given fields: ctx, merchnt_request_id
func (_m *Repository) GetPaymentByMerchantRequestId(ctx context.Context, merchnt_request_id string) (*model.Payment, error) {
	ret := _m.Called(ctx, merchnt_request_id)

	var r0 *model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Payment, error)); ok {
		return rf(ctx, merchnt_request_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Payment); ok {
		r0 = rf(ctx, merchnt_request_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, merchnt_request_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePaymentStatus provides a mock function with given fields: ctx, paymentStatus, paymentId
func (_m *Repository) UpdatePaymentStatus(ctx context.Context, paymentStatus model.PaymentStatus, paymentId string) (*model.Payment, error) {
	ret := _m.Called(ctx, paymentStatus, paymentId)

	var r0 *model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PaymentStatus, string) (*model.Payment, error)); ok {
		return rf(ctx, paymentStatus, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PaymentStatus, string) *model.Payment); ok {
		r0 = rf(ctx, paymentStatus, paymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PaymentStatus, string) error); ok {
		r1 = rf(ctx, paymentStatus, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
